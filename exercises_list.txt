
1. Дана строка из маленьких букв латиницы,
нужно для каждой буквы из тех, что встречаются в этой строке
выдать максимальную длину подряд идущих символов.
Например, aaaabaabbaaaaacf. Ответ: a - 5, b - 2, c - 1, f - 1.

2. Написать метод, который принимает два отсортированных массива
и на выходе даёт отсортированный массив с элементами из первых двух.

3. Написать класс, которому в конструкторе передаётся массив пар интов: число и вес.
Написать в этом классе метод GetRandom, который будет возвращаться рандомное число
из заданных, где веса - отношения вероятности выпадения.
Т.е. если задано 10, 1; 20, 2; 30, 4, то 30 должно выпадать в 4 раза чаще чем 10.

4. Дан компьютер с известными параметрами процессора, памяти, харда и сети.
Написать там сервер умеющий два метода: POST/key/data и GET/key,
где key - всё что угодно, любого размера, value соответственно тоже.
Сервер должен работать с кучей пользователей самым лучшим и быстрым способом.

5. Написать LRU кэш на плюсах в условиях какой-нибудь железки с ограниченной памятью,
т.е. все локальные переменные, аллокации и т.д. тоже влияют на размер кэша и их надо считать.

6. Дано n написать программу, выдающую все правильные скобочные последовательности длины 2n.

7. Дан массив точек на плоскости в декартовых координатах, нужно написать метод,
который возвращает true если существует такая вертикальная прямая,
что весь этот массив точек будет симметричен относительно этой прямой.

8. Написать функцию getPrimes(n) // Должна вернуть простые числа от 2 до n;

9. Написать функцию, проверяющую правильно расставленные скобки;
check("{()}[]") // true
check("{[}]") // false

10. Написать функцию sum чтобы выражение sum(1)(2)(5)(10) возвращало 17.

11. Написать функцию getAnagrams
getAnagrams(“нос”, “сон”, “снедь”, “днесь”)
[
  ["нос", "сон"],
  ["днесь", "снедь"]
]

12. Рассказать что знаешь про методы оптимизации веб-страницы.

13. Рассказать про ограничения кроссдоменных запросов.

14. Рассказать про то, что проиходит от момента вбивания адреса
в адресную строку браузера до момента полной отрисовки страницы.

15. Задача — выдать деньги. Условие минимального количества купюр не ставилось,
просто выдать, но желательно максимальными купюрами.
var moneyTypes = [5000, 1000, 500, 100, 50];
function getMoney(amount) {
   // нужно вернуть набор денег в следующем формате
   // {
   //   5000: 1,
   //   1000: 2,
   //   ....
   //   50: 5
   // }
   // Или бросить исключение, если вернуть деньги невозможно
}
Здесь просто идти в лоб от наибольшего значения к наименьшему нельзя,
т.к. в лоб я не смогу вернуть значение 120,
которое можно соорудить из 30-к.
А идти от наименьшего нельзя по условию задачи (да и не должен банкомат выдавать деньги мелкими купюрами).

16. Реализовать функции five, add, one, seven, subtract, two, чтобы работало:
five(add(one())) // 6
seven(subtract(two())) // 5

17. Написать функцию myNew, чтобы она работала как конструктор, но без вызова new.
function Person(name, age) {
  this.name = name;
  this.age = age;
}
var person = myNew(person, "Vasia", 34);
person instanceOf Person // true;

18. Найти сумму всех values
{
  value: 4,
  next: [
    {
      value: 3,
      next: [...]
    },
    {
      value: 3,
      next: [...]
    },
    ...
  ]
}

19. По условию задачи у вас есть формула с цифрами, операциями +-*/ и скобками.
Нужно написать программу, которая ее вычисляет. Формула может быть большой.
Хочется, чтобы программу можно было легко дорабатывать, вводя функции, параметры и т.д.
В результате хотим получить синтаксическое дерево, где в узлах будут операции, а в листьях – константы.
Если бы скобок не было, дерево было бы очень простым.
У нас есть два приоритета операций, соответственно, дерево получается двухуровневым: сверху стоит + и -, снизу * и /.


Ссылки

Список статей
en.wikipedia.org/wiki/Data_structures
en.wikipedia.org/wiki/Dynamic_array
en.wikipedia.org/wiki/Hash_table
en.wikipedia.org/wiki/B-tree
en.wikipedia.org/wiki/Rb-tree
en.wikipedia.org/wiki/Self-balancing_binary_search_tree
en.wikipedia.org/wiki/Heap_(data_structure)
en.wikipedia.org/wiki/Trie
en.wikipedia.org/wiki/Skip_list
en.wikipedia.org/wiki/Graph_(abstract_data_type)
en.wikipedia.org/wiki/Sorting_algorithm
en.wikipedia.org/wiki/Heapsort
en.wikipedia.org/wiki/Quicksort
en.wikipedia.org/wiki/Radix_sort

https://ru.wikipedia.org/wiki/%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BE%D1%87%D0%BD%D0%BE%D0%B9_%D1%81%D1%82%D0%B0%D0%BD%D1%86%D0%B8%D0%B8
https://www.google.com/search?q=LR+parser&oq=LR+parser&aqs=chrome..69i57j0j69i60j0l3.527j0j4&sourceid=chrome&ie=UTF-8
